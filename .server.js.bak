// server.js

require('dotenv').config();

const express = require('express');
const https = require('https');
const fs = require('fs');
const path = require('path');
const { createProxyMiddleware } = require('http-proxy-middleware');
const cors = require('cors');

const app = express();

// Enable CORS
app.use(cors({
  origin: 'https://lofivibz.com', // Replace with your actual domain
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type'],
}));

// Proxy middleware for /api/live-video-ids
app.use(
  '/api/live-video-ids',
  createProxyMiddleware({
    target: 'http://localhost:3001',
    changeOrigin: true,
    pathRewrite: {
      '^/api/live-video-ids': '/api/live-video-ids', // Ensure correct path
    },
    logLevel: 'debug', // Enable debug logs
  })
);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

// Middleware to parse JSON bodies
app.use(express.json());

// API endpoint to fetch video details
app.post('/api/video-details', async (req, res) => {
  const videoId = req.body.id;
  console.log(`Received POST request for video ID: ${videoId}`);

  if (!videoId) {
    console.error('Error: Missing video ID in request body');
    return res.status(400).json({ error: 'Missing video ID' });
  }

  try {
    const response = await youtube.videos.list({
      part: 'snippet',
      id: videoId,
    });
    console.log('YouTube API response:', response.data);

    if (response.data.items.length === 0) {
      console.error(`Error: No video found for ID: ${videoId}`);
      return res.status(404).json({ error: 'Video not found' });
    }

    const video = response.data.items[0];
    const title = video.snippet.title;
    console.log(`Fetched video title: ${title} for video ID: ${videoId}`);
    res.json({ title });
  } catch (error) {
    console.error('Error fetching video details:', error.message, error.stack);
    res.status(500).json({ error: 'Failed to fetch video details' });
  }
});

// 404 handler (keep this last)
app.use((req, res) => {
  res.status(404).send('Endpoint not found');
});

// HTTPS server setup
const httpsOptions = {
  key: fs.readFileSync('/path/to/private.key'), // Replace with your actual key path
  cert: fs.readFileSync('/path/to/certificate.crt'), // Replace with your actual cert path
};
https.createServer(httpsOptions, app).listen(443, () => {
  console.log('Server running on port 443');
});
